/**
 * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
class Logger {
    constructor() {
        this.isDebugEnabled = window.CONFIG && window.CONFIG.DEBUG;
    }
    
    debug(...args) {
        if (this.isDebugEnabled) {
            console.log('[DEBUG]', ...args);
        }
    }
    
    info(...args) {
        console.log('[INFO]', ...args);
    }
    
    warn(...args) {
        console.warn('[WARN]', ...args);
    }
    
    error(...args) {
        console.error('[ERROR]', ...args);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
const logger = new Logger();

class MeetingTimer {
    constructor() {
        this.currentMeeting = null;
        this.nextMeeting = null;
        this.isConnected = false;
        this.updateInterval = null;
        
        this.initializeElements();
        this.startTimer();
        this.loadMeetings();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ —Å—Ä–∞–∑—É
        this.updateEmployeeInfo();
    }
    
    initializeElements() {
        this.elements = {
            currentTimer: document.getElementById('currentTimer'),
            nextCountdown: document.getElementById('nextCountdown'),
            meetingTitle: document.querySelector('.meeting-title'),
            employeeInfo: document.getElementById('employeeInfo'),
            positionBadge: document.getElementById('positionBadge'),
            nameBadge: document.getElementById('nameBadge'),
            responsibilityAreas: document.getElementById('responsibilityAreas')
        };
    }
    
    hideBadge() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç
        document.getElementById('meetingBadge').style.display = 'none';
        document.getElementById('companyLogo').style.display = 'flex';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –≤—Å–µ–≥–¥–∞
        this.elements.employeeInfo.style.display = 'flex';
        this.elements.responsibilityAreas.style.display = 'block';
        logger.info('–ù–µ—Ç –≤—Å—Ç—Ä–µ—á - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ');
    }
    
    showBadge() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å—Ç—Ä–µ—á–∞—Ö
        document.getElementById('meetingBadge').style.display = 'flex';
        document.getElementById('companyLogo').style.display = 'none';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        this.elements.employeeInfo.style.display = 'flex';
        this.elements.responsibilityAreas.style.display = 'block';
        logger.info('–ï—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂');
    }
    
    async loadMeetings() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–æ–≥–æ Google Calendar
            const calendarUrl = this.getGoogleCalendarUrl();
            await this.loadFromPublicCalendar(calendarUrl);
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç—Ä–µ—á:', error);
            this.hideBadge();
        }
    }
    
    getGoogleCalendarUrl() {
        // –ü–æ–ª—É—á–∞–µ–º URL –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return window.CONFIG.CALENDAR_URL;
    }
    
    async fetchWithProxy(url) {
        // –°–ø–∏—Å–æ–∫ proxy —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
        const proxies = [
            `https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`,
            `https://thingproxy.freeboard.io/fetch/${url}`,
            `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(url)}`,
            `https://cors-anywhere.herokuapp.com/${url}`
        ];
        
        for (let i = 0; i < proxies.length; i++) {
            try {
                logger.info(`üîÑ –ü—Ä–æ–±—É–µ–º proxy ${i + 1}/${proxies.length}:`, proxies[i]);
                const response = await fetch(proxies[i]);
                if (response.ok) {
                    logger.info(`‚úÖ Proxy ${i + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ`);
                    return response;
                } else {
                    logger.warn(`‚ùå Proxy ${i + 1} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
                }
            } catch (error) {
                logger.warn(`‚ùå Proxy ${i + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
                if (i === proxies.length - 1) {
                    throw new Error(`–í—Å–µ proxy —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`);
                }
            }
        }
    }
    
    async loadFromPublicCalendar(calendarUrl) {
        try {
            logger.debug('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–∑:', calendarUrl);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º proxy –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Google Calendar
            const startTime = Date.now();
            let response;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Google Calendar URL
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', calendarUrl);
            if (calendarUrl.includes('calendar.google.com')) {
                logger.info('üîß –û–ë–•–û–î CORS: –ò—Å–ø–æ–ª—å–∑—É–µ–º proxy –¥–ª—è Google Calendar...');
                response = await this.fetchWithProxy(calendarUrl);
            } else {
                logger.info('üîß –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ-Google –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
                try {
                    response = await fetch(calendarUrl);
                } catch (corsError) {
                    logger.debug('CORS –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º proxy...');
                    response = await this.fetchWithProxy(calendarUrl);
                }
            }
            
            const loadTime = Date.now() - startTime;
            logger.debug(`–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${loadTime}ms`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const icalData = await response.text();
            logger.debug('iCal –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä:', icalData.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã HTML –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ iCal
            if (icalData.includes('<html') || icalData.includes('Error 404')) {
                logger.error('–ü–æ–ª—É—á–µ–Ω–∞ HTML –æ—à–∏–±–∫–∞ –≤–º–µ—Å—Ç–æ iCal –¥–∞–Ω–Ω—ã—Ö. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
                this.hideBadge();
                return;
            }
            
            const events = this.parseICalData(icalData);
            logger.debug('–°–æ–±—ã—Ç–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:', events.length);
            
            this.processCalendarEvents(events);
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
            this.hideBadge();
        }
    }
    
    parseICalData(icalData) {
        const events = [];
        const lines = icalData.split('\n');
        let currentEvent = null;
        
        logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ iCal –¥–∞–Ω–Ω—ã—Ö, —Å—Ç—Ä–æ–∫:', lines.length);
        
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            
            if (line === 'BEGIN:VEVENT') {
                currentEvent = {};
                logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ');
            } else if (line === 'END:VEVENT' && currentEvent) {
                if (currentEvent.summary && currentEvent.start && currentEvent.end) {
                    logger.debug('–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ:', {
                        summary: currentEvent.summary,
                        start: currentEvent.start,
                        end: currentEvent.end
                    });
                    events.push({
                        summary: currentEvent.summary,
                        start: currentEvent.start,
                        end: currentEvent.end
                    });
                } else {
                    logger.warn('–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', currentEvent);
                }
                currentEvent = null;
            } else if (currentEvent) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, DTSTART;TZID=Europe/Moscow:20250922T104500)
                const colonIndex = line.indexOf(':');
                if (colonIndex === -1) continue;
                
                const keyPart = line.substring(0, colonIndex);
                const value = line.substring(colonIndex + 1);
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –∫–ª—é—á–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ ;)
                const key = keyPart.split(';')[0];
                
                switch (key) {
                    case 'SUMMARY':
                        currentEvent.summary = value;
                        break;
                    case 'DTSTART':
                        currentEvent.start = this.parseICalDate(line); // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        break;
                    case 'DTEND':
                        currentEvent.end = this.parseICalDate(line); // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        break;
                    case 'DESCRIPTION':
                        currentEvent.description = value;
                        break;
                }
            }
        }
        
        return events;
    }
    
    parseICalDate(dateString) {
        logger.info('üìÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É:', dateString);
        
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ iCal
        if (dateString.includes('TZID=Europe/Moscow:')) {
            // –§–æ—Ä–º–∞—Ç —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: DTSTART;TZID=Europe/Moscow:20250922T104500
            const datePart = dateString.split('TZID=Europe/Moscow:')[1];
            const year = datePart.substring(0, 4);
            const month = datePart.substring(4, 6);
            const day = datePart.substring(6, 8);
            const hour = datePart.substring(9, 11);
            const minute = datePart.substring(11, 13);
            const second = datePart.substring(13, 15);
            
            const dateStr = `${year}-${month}-${day}T${hour}:${minute}:${second}+03:00`;
            logger.info('üìÖ –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É (Moscow):', dateStr);
            const result = new Date(dateStr);
            logger.info('üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (Moscow):', result, 'Valid:', !isNaN(result.getTime()));
            return result;
        } else if (dateString.endsWith('Z')) {
            // –§–æ—Ä–º–∞—Ç UTC: DTSTART:20250921T180000Z
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
            const colonIndex = dateString.indexOf(':');
            if (colonIndex === -1) {
                logger.warn('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ":" –≤ UTC –¥–∞—Ç–µ:', dateString);
                return new Date('Invalid Date');
            }
            
            const datePart = dateString.substring(colonIndex + 1);
            const year = datePart.substring(0, 4);
            const month = datePart.substring(4, 6);
            const day = datePart.substring(6, 8);
            const hour = datePart.substring(9, 11);
            const minute = datePart.substring(11, 13);
            const second = datePart.substring(13, 15);
            
            const dateStr = `${year}-${month}-${day}T${hour}:${minute}:${second}Z`;
            logger.info('üìÖ –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É (UTC):', dateStr);
            const result = new Date(dateStr);
            logger.info('üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (UTC):', result, 'Valid:', !isNaN(result.getTime()));
            return result;
        } else if (dateString.length >= 15 && dateString.includes('T')) {
            // –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: DTSTART:20250922T104500
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
            const colonIndex = dateString.indexOf(':');
            if (colonIndex === -1) {
                logger.warn('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ":" –≤ –ø—Ä–æ—Å—Ç–æ–π –¥–∞—Ç–µ:', dateString);
                return new Date('Invalid Date');
            }
            
            const datePart = dateString.substring(colonIndex + 1);
            const year = datePart.substring(0, 4);
            const month = datePart.substring(4, 6);
            const day = datePart.substring(6, 8);
            const hour = datePart.substring(9, 11);
            const minute = datePart.substring(11, 13);
            const second = datePart.substring(13, 15);
            
            const dateStr = `${year}-${month}-${day}T${hour}:${minute}:${second}+03:00`;
            logger.info('üìÖ –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É (–ø—Ä–æ—Å—Ç–æ–π):', dateStr);
            const result = new Date(dateStr);
            logger.info('üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–æ—Å—Ç–æ–π):', result, 'Valid:', !isNaN(result.getTime()));
            return result;
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            logger.warn('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:', dateString);
            return new Date('Invalid Date');
        }
    }
    
    processCalendarEvents(events) {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
        
        logger.debug('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', events.length);
        logger.debug('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', now.toLocaleString());
        logger.debug('–°–µ–≥–æ–¥–Ω—è:', today.toLocaleDateString());
        logger.debug('–ó–∞–≤—Ç—Ä–∞:', tomorrow.toLocaleDateString());
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        const relevantEvents = events.filter(event => {
            const eventDate = new Date(event.start);
            return eventDate >= today && eventDate < tomorrow;
        });
        
        logger.debug('–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:', relevantEvents.length);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        relevantEvents.sort((a, b) => a.start - b.start);
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É
        this.currentMeeting = relevantEvents.find(event => {
            return event.start <= now && event.end > now;
        });
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É
        this.nextMeeting = relevantEvents.find(event => {
            return event.start > now;
        });
        
        logger.debug('–¢–µ–∫—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:', this.currentMeeting ? this.currentMeeting.summary : '–Ω–µ—Ç');
        logger.debug('–°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:', this.nextMeeting ? this.nextMeeting.summary : '–Ω–µ—Ç');
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—É—â–µ–π, –Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
        if (!this.currentMeeting && !this.nextMeeting) {
            logger.info('–ù–µ—Ç –≤—Å—Ç—Ä–µ—á - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏');
            this.hideBadge();
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á
            this.updateEmployeeInfo();
            return;
        }
        
        logger.info('–ï—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂');
        this.updateDisplay();
    }
    
    updateDisplay() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
        this.showBadge();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏ —Ç–∞–π–º–µ—Ä—ã
        this.updateTimers();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.updateEmployeeInfo();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        setTimeout(() => {
            this.updateTimers();
        }, 100);
    }
    
    updateEmployeeInfo() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (this.elements.positionBadge) {
            this.elements.positionBadge.textContent = window.CONFIG.EMPLOYEE_POSITION;
        }
        if (this.elements.nameBadge) {
            this.elements.nameBadge.textContent = window.CONFIG.EMPLOYEE_NAME;
        }
        if (this.elements.responsibilityAreas) {
            this.elements.responsibilityAreas.textContent = window.CONFIG.RESPONSIBILITY_AREAS;
        }
    }
    
    updateTimerOnly() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä—ã, –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        this.updateTimers();
    }
    
    startTimer() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        this.updateInterval = setInterval(() => {
            this.updateTimers();
        }, window.CONFIG.TIMER_INTERVAL);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.calendarUpdateInterval = setInterval(() => {
            logger.debug('–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
            this.loadMeetings();
        }, window.CONFIG.CALENDAR_INTERVAL);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è OBS –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.obsRefreshInterval = setInterval(() => {
            logger.debug('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è OBS...');
            this.forceOBSRefresh();
        }, window.CONFIG.OBS_REFRESH_INTERVAL);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if (window.CONFIG.EMPLOYEE_INFO_AUTO_UPDATE) {
            this.employeeInfoUpdateInterval = setInterval(() => {
                logger.debug('–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ...');
                this.updateEmployeeInfo();
            }, window.CONFIG.CALENDAR_INTERVAL);
        }
    }
    
    stopTimer() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
        if (this.calendarUpdateInterval) {
            clearInterval(this.calendarUpdateInterval);
            this.calendarUpdateInterval = null;
        }
        if (this.obsRefreshInterval) {
            clearInterval(this.obsRefreshInterval);
            this.obsRefreshInterval = null;
        }
        if (this.employeeInfoUpdateInterval) {
            clearInterval(this.employeeInfoUpdateInterval);
            this.employeeInfoUpdateInterval = null;
        }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    refreshCalendar() {
        logger.info('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
        this.loadMeetings();
    }
    
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è OBS
    forceOBSRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        this.loadMeetings();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateDisplay();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ DOM –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const badge = document.getElementById('meetingBadge');
        if (badge) {
            badge.style.transform = 'scale(1.001)';
            setTimeout(() => {
                badge.style.transform = 'scale(1)';
            }, 10);
        }
        
        logger.debug('OBS –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    updateTimers() {
        const now = new Date();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏
        if (this.currentMeeting) {
            const remaining = this.currentMeeting.end - now;
            const totalDuration = this.currentMeeting.end - this.currentMeeting.start;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            this.elements.meetingTitle.textContent = '–ö–æ–Ω–µ—Ü —á–µ—Ä–µ–∑';
            
            if (remaining > 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏
                this.elements.currentTimer.textContent = this.formatTimeRemaining(remaining);
                this.elements.currentTimer.className = 'timer';
                
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞
                if (remaining < window.CONFIG.WARNING_TIME) {
                    this.elements.currentTimer.className = 'timer warning';
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                this.updateFill(remaining, totalDuration);
            } else {
                // –í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞
                const overdue = Math.abs(remaining);
                this.elements.currentTimer.textContent = '-' + this.formatTimeRemaining(overdue);
                this.elements.currentTimer.className = 'timer overdue';
                
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
                this.updateFill(0, totalDuration);
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "Free-time" –∏ –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏
            this.elements.meetingTitle.textContent = 'Free-time';
            this.elements.currentTimer.textContent = 'Free-time';
            this.elements.currentTimer.className = 'timer';
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ –Ω–µ—ë
            if (this.nextMeeting) {
                const timeToNext = this.nextMeeting.start - now;
                if (timeToNext > 0) {
                    this.elements.currentTimer.textContent = this.formatTimeRemaining(timeToNext);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            const meetingBadge = document.querySelector('.meeting-badge');
            if (meetingBadge) {
                meetingBadge.style.background = 'transparent';
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –ú–æ—Å–∫–≤–µ
        if (this.nextMeeting) {
            this.elements.nextCountdown.textContent = this.formatMoscowTime(this.nextMeeting.start);
        } else {
            this.elements.nextCountdown.textContent = '–Ω–µ—Ç';
        }
    }
    
    updateFill(remaining, total) {
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ (0-1)
        const progress = Math.max(0, Math.min(1, remaining / total));
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (0% = –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π, 100% = —Å–∏–Ω–∏–π)
        const fillPercentage = (1 - progress) * 100;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        const meetingBadge = document.querySelector('.meeting-badge');
        if (meetingBadge) {
            if (progress === 0) {
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω–∏–π
                meetingBadge.style.background = '#0037C0';
            } else if (progress === 1) {
                // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
                meetingBadge.style.background = 'transparent';
            } else {
                // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - —Å–∏–Ω–∏–π —Å–ª–µ–≤–∞, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–ø—Ä–∞–≤–∞
                const gradient = `linear-gradient(90deg, #0037C0 0%, #0037C0 ${fillPercentage}%, transparent ${fillPercentage}%, transparent 100%)`;
                meetingBadge.style.background = gradient;
            }
            logger.debug(`–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: progress=${progress.toFixed(2)}, fill=${fillPercentage.toFixed(1)}%`);
        }
    }
    
    formatMoscowTime(date) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        const moscowTime = new Date(date.toLocaleString("en-US", {timeZone: "Europe/Moscow"}));
        return moscowTime.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Europe/Moscow'
        });
    }
    
    formatTimeRemaining(milliseconds) {
        const totalSeconds = Math.floor(milliseconds / 1000);
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = totalSeconds % 60;
        
        if (hours > 0) {
            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        } else {
            return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
    }
    
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let meetingTimer;
document.addEventListener('DOMContentLoaded', () => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ OBS —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    const isOBS = detectOBSEnvironment();
    
    if (isOBS) {
        document.body.classList.add('obs-mode');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ OBS
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ OBS
    function detectOBSEnvironment() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: URL —Å–æ–¥–µ—Ä–∂–∏—Ç OBS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
        const urlCheck = window.location.href.includes('obs') || 
                        window.location.href.includes('obs-studio') ||
                        window.location.search.includes('obs') ||
                        window.location.hash.includes('obs');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: User Agent —Å–æ–¥–µ—Ä–∂–∏—Ç OBS
        const userAgentCheck = window.navigator.userAgent.includes('OBS') ||
                              window.navigator.userAgent.includes('obs-studio');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ iframe –ò –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ OBS
        const iframeCheck = window.parent !== window && (
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ frameElement —Å OBS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
            (window.frameElement && (
                (window.frameElement.id && window.frameElement.id.includes('obs')) ||
                (window.frameElement.className && window.frameElement.className.includes('obs')) ||
                (window.frameElement.getAttribute('data-obs') !== null)
            )) ||
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º referrer –Ω–∞ OBS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ö–æ—Å—Ç—ã
            (document.referrer && (
                document.referrer.includes('obs-studio') ||
                document.referrer.includes('localhost') ||
                document.referrer.includes('127.0.0.1')
            )) ||
            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ hostname —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
            checkParentHostname()
        );
        
        // –¢—Ä–µ–±—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è OBS
        // –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 3 –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å true, –ò –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –Ω–µ-URL –ø—Ä–æ–≤–µ—Ä–∫–∞
        const checks = [urlCheck, userAgentCheck, iframeCheck];
        const trueChecks = checks.filter(check => check).length;
        
        return trueChecks >= 2 && (userAgentCheck || iframeCheck);
    }

    function checkParentHostname() {
        try {
            return window.parent.location && (
                window.parent.location.hostname === 'localhost' ||
                window.parent.location.hostname === '127.0.0.1' ||
                window.parent.location.hostname.includes('obs')
            );
        } catch (e) {
            // Cross-origin access blocked - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            return false;
        }
    }

    meetingTimer = new MeetingTimer();
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (meetingTimer) {
        meetingTimer.stopTimer();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç OBS
window.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'refresh') {
        if (meetingTimer) {
            meetingTimer.refreshCalendar();
        }
    }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
document.addEventListener('keydown', (event) => {
    // F5 - –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if (event.key === 'F5') {
        event.preventDefault();
        if (meetingTimer) {
            meetingTimer.refreshCalendar();
        }
    }
    // Ctrl+R - –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if (event.ctrlKey && event.key === 'r') {
        event.preventDefault();
        if (meetingTimer) {
            meetingTimer.refreshCalendar();
        }
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
window.refreshCalendar = () => {
    if (meetingTimer) {
        meetingTimer.refreshCalendar();
    }
};


window.forceOBSRefresh = () => {
    if (meetingTimer) {
        meetingTimer.forceOBSRefresh();
    }
};

